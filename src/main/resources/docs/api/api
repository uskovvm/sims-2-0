API СКУД

Текущая версия: 0.4.0

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
>> Преамбула                                                                  >>
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
1) В случае исключительной ошибочной ситуации, надо выставлять статус 500 и возвращать объект следующго вида
{
  status: [string],           // код ошибки
  description: [string]       // описание ошибки
}
В случае стандартного отрицательного ответа - выставлять статус 200


2) Условные обозначения:
[name_of_type] - когда из контекста понятно, что не имеется ввиду массив, символический тип объекта
[...name_of_type] - массив объектов заданного типа

3) В описании функций и параметров:
[deprecated] - функция устарела, и, возможно, будет удалена. Функционал с данной пометкой лучше не использовать
[optional] - опционально
[default=...] - значение по умолчанию
[note=...] - информация к размышлению

4) Тестовые инстансы
http://172.16.3.10:3000/index.html
http://172.16.3.118:8080/
http://37.208.68.23:8080/



>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
>> Модуль CORE                                                                >>
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
--------------------------------------------------------------------------------
Получить версии продукта
GET /core/api/versions

Возвращаемое значение:
{
  api: [string],
  backend: [string],
  db: [string]
}


--------------------------------------------------------------------------------V
Войти в систему
POST /core/api/login

Параметры:
{
  username: [string],             // логин
  password: [string]              // пароль
}

Возвращаемое значение:
В случае успеха:

{
  "token" : [string],				// токен
  "status" : "success",				// статус операции			//? Если Response code = 200, зачем это поле? 
  "description" : "Login Success",	// оисание статуса операции	//? Если Response code = 200, зачем это поле?
  "response" : {					// информация о залогинном пользователе
    "id" : [number],				// ид пользователя
    "username" : [string],			// имя пользователя
    "blocked" : [number],			// аккаунт заблокирован		//? Это поле нужно?
    "registerDate" : [numer],		// дата регистрации аккаунта //? Тип поля number или лучше date?
    "avatar" : [string],			//
    "roles" : [...number],			// ид ролей пользователя
    "permissions" : [...number]		// права пользователя, ид разрешений
  }
}

В случае ошибки:
{
  status: 'error',               // статус операции
  description: 'Login Failure'   // описание статуса
}


--------------------------------------------------------------------------------
Проверить, авторизован ли пользователь
GET /core/api/authorized

Возвращаемое значение:
В случае успеха:
{
  status: 'success'
}

В случае ошибки:
{
  status: 'error'
}


--------------------------------------------------------------------------------
Получить данные текущего пользователя
GET /core/api/sys/user

Возвращаемое значение:
В случае успеха:
{
  status: 'success',             // статус операции
  response: {                    // информация о залогинном пользователе
    id: [number],                // ид пользователя
    username: [string],          // имя пользователя
    registerDate: [number],      // дата регистрации аккаунта
    blocked: [number],           // аккаунт заблокирован
    roles: [
      [...number]                // ид ролей пользователя
    ],
    permissions: [               // права пользователя
      [...number]                // ид разрешений
    ]
  }
}
В случае ошибки:
{
  status: 'error'                // статус операции
}


--------------------------------------------------------------------------------
Выйти из системы
POST /core/api/logout

Возвращаемое значение:
В случае успеха:
{
  status: 'success'
}

В случае ошибки:
{
  status: 'error'
}


--------------------------------------------------------------------------------
Получить конфигурацию модулей для текущего пользователя
GET /core/api/modules

Возвращаемое значение:
В случае успеха
[
  {
    id: [number],           // ид модуля   
    name: [string],         // символьный идентификатор
    description: [string],  // описание модуля
    enabled: [boolean]      // модуль включен
  },
  ...
]


--------------------------------------------------------------------------------
Установить доступность модулей
POST /core/api/modules/enabled

Параметры:
[
  {
    id: [number],            // ид модуля
    enabled: [boolean]       // активация/деактивация
  },
  ...
] 

Возвращаемое значение:
В случае успеха:
{
  status: 'success'
}

В случае ошибки:
{
  status: 'error'
}


--------------------------------------------------------------------------------
Получение списка привилегий
GET /core/api/permissions

Возращаемые значения:
[
  {
    id: [number],             // ид привилегии
    name: [string]            // название привилегии
  },
  ...
]


--------------------------------------------------------------------------------VVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
Получить список объектов, на которые действует данная привилегия
GET /core/api/permission/objects

Параметры:
userId=[number][optional]               // ид пользователя
roleId=[number][optional]               // ид роли
id=[number]                             // ид привилегии

Задаётся или ид роли или ид пользователя

Возвращаемое значение:
[...number]


--------------------------------------------------------------------------------
Установить список объектов, на которые действует данная привилегия
POST /core/api/permission/objects

Параметры:
{
  userId: [number][optional],           // ид пользователя
  roleId: [number][optional],           // ид роли
  id: [number],                         // ид привилегии
  objects: [...number]                  // связанные объекты
}

Задаётся или ид роли или ид пользователя

Возвращаемое значение:
В случае успеха
{
  status: 'success'
}

В случае ошибки:
{
  status: 'error'
}


--------------------------------------------------------------------------------
Получение ролей с привилегиями
GET /core/api/roles

Возвращаемое значение:
[
  {
    id: [number],                       // ид роли
    name: [string],                     // название роли
    description: [string],              // описание роли
    permissions: [...number]            // список с ид привилегий
  },
  ...
]


--------------------------------------------------------------------------------
Установить значения привилегий для роли
POST /core/api/roles/permissions

В случае успеха, переписывает старые значения

Параметры:
[
  {
    id: [number],                       // ид роли
    permissions: [...number]            // список ид разрешений
  },
  ...
]

Возвращаемое значение:
В случае успеха:
{
  status: 'success'
}
В случае ошибки:
{
  status: 'error'
}


--------------------------------------------------------------------------------Уточнить стуктуру
Получить доступные порты
GET /core/api/ports

Возвращаемое значение:
[
  {
    id: [number],             // ид порта
    name: [string],           // название порта
    vid: [string],            // код производителя (вендора) порта
    pid: [string],            // код продукта
    serialNumber: [string],   // серийный номер
    pnpId: [string],          // vid + pid + serialNumber + номера портов хабов или шин
    sysName: [string],        // системное имя устройства
    status: [number]          // 0 - недоступно/неподключено, 1 - подключено (порт подключен, но не открыт), 2 - в процессе открытия, 3 - открыто и занято устройством
  },
  ...
]


--------------------------------------------------------------------------------
Получить список поддерживаемых протоколов
GET /core/api/protocol/types

Параметры:
connectionTypeId: [number][optional]// выдать протоколы только для данного типа соединения

Возвращаемое значение:
[
  {
    id: [number],                   // ид протокола
    name: [string],                 // название протокола
    baudrate: [number][optional]    // некоторые прошивки турникетов требуют скорость ком-порта 19200
  },
  ...
]


--------------------------------------------------------------------------------
Получить список доступных типов соединений
GET /core/api/connection/types

Параметры: 
typeId: [number][optional]      // выдать протоколы, доступные для данного устройства

Возвращаемое значение:
[
  {
    id: [number],                     // ид соединения
    name: [string],                   // название соединения
    ip: [boolean],                    // требуется наличие ip-адреса
    protocols: [                      // список поддерживаемых протоколов
      {
        id: [number],                 // ид протокола
        name: [string]                // название
      },
      ...
    ]   
  }, 
  ...
]


--------------------------------------------------------------------------------
Получить список типов идентификации
GET /core/api/identification/types

Возвращаемое значение:
[
  {
    id: [number],               // ид типа
    name: [string]              // название
  },
  ...
]


--------------------------------------------------------------------------------Не соответствует.
Получить список устройств
GET /core/api/device/types


//api
Возвращаемое значение
[
  {
    id: [number],                   // ид типа оборудования
    name: [string],                 // название девайса
    accessTypeId: [number],			// тип контроля доступа (1 - для одной зоны, 2 - для двух)
    connections: [                  // доступные соединения
      {
        id: [number],               // ид типа 
        name: [string],             // название соединения
        ip: [boolean],              // требуется ip
        protocols: [                // досутпные протоколы
          { 
            id: [number],           // ид протокола
            name: [string]          // название протокола
          },
          ...
        ]
      },
      ...
    ]
  },
  ...
]

//Бэкенд возвращает
[
  {
    id: [number],                   // ид типа оборудования
    name: [string],                 // название девайса
	description:[string]
  },
  ...
]



--------------------------------------------------------------------------------
Получить список учётных записей
GET /core/api/users

Параметры:
limit: [number][optional][default=100]      // количество элементов в запросе
offset: [number][optional][default=0]       // смещение относительно начала

Возвращаемое значение:
{
  pager: {
    totalRows: [number]                     // всего записей
  },
  rows: [
    {
      id: [number],                         // ид аккаунта
      username: [string],                   // название аккаунта
      registerDate: [number],               // дата регистрации
      roles: [...number],                   // ид ролей
      blocked: [number]                     // пользователь заблокирован
    },
    ...
  ]
}


--------------------------------------------------------------------------------
Добавить/редактировать учётную запись
POST /core/api/user

Параметры:
{
  id: [number][optional],              // ид аккаунта (только при редактировании)
  username: [string],                  // имя пользователя
  password: [string][optional],        // пароль (только при создании)
  roles: [...number],                  // список ролей пользователя
  blocked: [number]                    // заблокировать пользователя 
}

Возвращаемое значение:
В случае успеха:
{
  status: 'success',
  response: {
    id: [number][optional]              // при создании объекта - ИД созданного объекта
  }
}

В случае ошибки:
{
  status: 'error'
}


--------------------------------------------------------------------------------
Удалить учётную запись
DELETE /core/api/user

Параметры:
{
  id: [number]                        // ид удаляемого аккаунта
}

Возвращаемое значение:
В случае успеха:
{
  status: 'success'
}

В случае ошибки:
{
  status: 'error'
}


--------------------------------------------------------------------------------
Сбросить пароль
POST /core/api/user/password

Параметры:
{
  id: [number][optional],       // ид аккаунта
  oldPassword: [string],        // старый пароль
  newPassword: [string]         // новый пароль
}

Если id не задан - сбрасывает пароль текущего залогиненного пользователя

Возвращаемое значение:
В случае успеха:
{
  status: 'success'
}

В случае ошибки:
{
  status: 'error'
}


--------------------------------------------------------------------------------
Проверить доступность имени пользователя
POST /core/api/user/username/available

Параметры:
{
  username: [string]
}

Возвращаемое значение:
Если имя пользователя свободно
{
  status: 'success'
}

Если имя пользователя занято
{
  status: 'error'
}


--------------------------------------------------------------------------------
Послать команду базе данных
POST /core/api/db/command

Параметры:
{
  id: [number]          // ид комманды (1 - резервное копирование, 2 - восстановление из резервной копии, 3 - автоматическое резервное копирование)
}

Возвращаемое значение:
В случае успеха:
{
  status: 'success'
}

В случае ошибки:
{
  status: 'error'
}


--------------------------------------------------------------------------------
Получить конфигурацию
GET /core/api/config

Возвращаемое значение:
{
  owner: {                                        // информация о владельце продукта
    name: [string],                               // название
    fullName: [string],                           // полное название
    description: [string],                        // описание
    email: [string],                              // email
    organizationId: [number][optional][default=0] // ид связанной организации
  }
}


--------------------------------------------------------------------------------
Задать информацию
POST /core/api/config

Параметры:
{
  owner: {                                        // информация о владельце продукта
    name: [string],                               // название
    fullName: [string],                           // полное название
    description: [string],                        // описание
    email: [string],                              // email
    organizationId: [number][optional][default=0] // ид связанной организации
  }
}

Возвращаемое значение:
В случае успеха:
{
  status: 'success'
}

В случае ошибки:
{
  status: 'error'
}


--------------------------------------------------------------------------------
Получить информацию о настройке кластера:
GET /core/api/cluster

Возвращаемое значение:
{
  enabled: [boolean],                             // Включен/выключен
  mode: [number][optional],                       // Режим 1 - мастер, 2 - вторичный (только если enabled === true)
  masterAddress: [string][optional],              // Адрес мастера (если mode === 2)
  slaveAddresses: [...string][optional]           // Адрес вторичных серверов (если mode === 1)
}


--------------------------------------------------------------------------------
Настроить информацию о кластере:
POST /core/api/cluster

Параметры:
{
  enabled: [boolean],                             // Включен/выключен
  mode: [number][optional],                       // Режим 1 - мастер, 2 - вторичный (только если enabled === true)
  masterAddress: [string][optional],              // Адрес мастера (если mode === 2)
  slaveAddresses: [...string][optional]           // Адрес вторичных серверов (если mode === 1)
}

Возвращаемое значение:
В случае успеха:
{
  status: 'success'
}

В случае ошибки:
{
  status: 'error'
}



>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
>> Модуль ACS                                                                 >>
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
--------------------------------------------------------------------------------
Получить список подключенных устройств	{?? Структура возвращаемого объекта отличается от описаной в АПИ ??}
GET /acs/api/devices	

Параметры:
typeId: [number][optional]						// тип запрашиваемого устройства
limit: [number][optional][default=100]
offset: [number][optional][default=0]

Возвращаемое значение:
{
  pager: {
    totalRows: [number]                         // всего записей
  },
  rows: [
    {
      id: [number],                             // ид установленного устройства
      name: [string],                           // название устройства
      description: [string],                    // описание устройства
      enabled: [boolean],                       // включен
      serialNumber: [string],                   // серийный номер
      connection: {
        typeId: [number],						// ид типа устройства
        connectionTypeId: [number],             // ид типа соединения
        protocolId: [number],                   // ид типа протокола
        portId: [number],                       // ид порта
        ip: [string][optional]                  // ip-адрес
      },
      device: {
        idx: [number][optional],                // порядок следования
        identificationTypeId: [number],         // тип устройства идентификации
        broken: [boolean][optional],            // устройство неисправно
        invert: [boolean][optional],            // устройство инвертировано
        cardAutoreg: [boolean][optional],		// авторегистрация карт 
        directionOpenMask: [[number], [number]][optional],// битовая маска для состояния устройства (0 - закрыто, 1 - открыто)
        wdtChannel: [number][optional],         // ид канала таймера
        state: [number][optional],              // состояния дверного контроллера (для дверей) или калитки
        
        soundEnabled: [boolean][optional],		// включена ли звуковая сигнализация на устройстве (для дверных контроллеров)
        lockTimeout: [number][optional],		// таймаут замка (для дверных контроллеров)
        openDoorTimeout: [number][optional],	// таймаут открытой двери (для дверных контроллеров)
        closedDoorTimeout: [number][optional],	// таймаут закрытой двери (для дверных контроллеров)
        buttonTypeId: [number][optional]		// тип кнопки (для дверных контроллеров)
      },
      access: {
        zoneId: [number][optional],             // зона, к которой привязано устройство
        zoneAId: [number][optional],            // зона входа
        zoneBId: [number][optional],            // зона выхода
        accessModeAB: [number][optional],       // тип доступа из зоны A в зону B
        accessModeBA: [number][optional]        // тип доступа из зоны B в зону A
      }
    },
    ...
  ]
}
==== Это возвращает nodeJS бэкенд
{
	"pager":{"totalRows":1},
	"rows":[
		{
			"id":3,
			"name":"EP2000 REMOTE",
			"description":"",
			"enabled":true,
			"connection":{
				"typeId":9,
				"connectionId":1,
				"protocolId":9
			},
			"device":{
				"dbConnectionId":2,
				"directionOpenMask":[0,0]
			},
			"access":{
				"zoneAId":1,
				"zoneBId":2,
				"accessModeAB":2,
				"accessModeBA":2
			}
		}
	]
}

--------------------------------------------------------------------------------
Добавить/редактировать устройство
POST /acs/api/device

Параметры:
{
  id: [number][optional],                     // ид установленного устройства
  name: [string],                             // название устройства
  description: [string],                      // описание устройства
  enabled: [boolean],                         // включен
  serialNumber: [string],                     // серийный номер
  connection: {
    typeId: [number],													// ид типа устройства
    connectionTypeId: [number],               // ид типа соединения
    protocolId: [number],                     // ид типа протокола
    portId: [number],                         // ид порта      
    ip: [string][optional]                    // ip-адрес
  },
  device: {                                   // специфические настройки устройства
    idx: [number][optional],                  // порядок следования
    identificationTypeId: [number],           // тип устройства идентификации
		cardAutoreg: [boolean][optional],					// авторегистрация карт
    broken: [boolean][optional],              // устройство неисправно
    invert: [boolean][optional],              // устройство инвертировано
    wdtChannel: [number][optional],           // ид канала таймера
    
		soundEnabled: [boolean][optional],				// включена ли звуковая сигнализация на устройстве (для дверных контроллеров)
		lockTimeout: [number][optional],					// таймаут замка (для дверных контроллеров)
		openDoorTimeout: [number][optional],			// таймаут открытой двери (для дверных контроллеров)
		closedDoorTimeout: [number][optional],		// таймаут закрытой двери (для дверных контроллеров)
		buttonTypeId: [number][optional]					// тип кнопки (для дверных контроллеров)
  },
  access: {
    zoneId: [number][optional],               // зона, к которой привязано устройство
    zoneAId: [number][optional],              // зона входа
    zoneBId: [number][optional],              // зона выхода
    ABAccess: [number][optional],             // тип доступа из зоны A в зону B
    BAAccess: [number][optional]              // тип доступа из зоны B в зону A
  }
}

Возвращаемое значение:
В случае успеха:
{
  status: 'success',
  response: {
    id: [number]                    	       // при создании - ИД созданных объектов
  }
}

В случае ошибки:
{
  status: 'error'
}


--------------------------------------------------------------------------------
Удалить устройство
DELETE /acs/api/device

Параметры:
{
	id: [number]	
}

Возвращаемое значение:
В случае успеха:
{
  status: 'success'
}

В случае ошибки:
{
  status: 'error'
}


--------------------------------------------------------------------------------
[note - возможно, стоит перенести полностью в websocket API]
Послать команду устройству/устройствам
POST /acs/api/command

Параметры:
{
  deviceId: [number][optional],     // ид устройства
  commandId: [string],              // ид команды (см. ниже)
  params: {
    direction: [number][optional],  // для турникетов - направление
    state: [number][optional]       // новое состояние устройства
  }
}

Возвращаемое значение:
В случае успеха:
{
  status: 'success',
  response: {
    direction: [number][optional],  // новое значение
    state: [number][optional]       // новое значение
  }
}

В случае ошибки:
{
  status: 'error'
}

Список поддерживаемых команд:
openOnce - единичное открытие двери
keepOpen - постоянный проход
close - закрыть турникет
policeAlarm - вызов ЧОП
alarm - сигнализация
setDoorControllerState - становить режим прохода для дверного контроллера
setDeviceState - установить состояние устройства
reset - вернуть заводские настройки


>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
>> Модуль PERSONNEL                                                           >>
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
--------------------------------------------------------------------------------
Получить список персонала
GET /personnel/api/accounts

Параметры: 
departmentId: [number][optional]          // получение списка персонала для заданного отдела
organizationId: [number][optional]        // получить список персонала для заданной организации
cardNumber: [number][optional]            // фильтрация по номеру карты
name: [string][optional]                  // поиск по имени
deleted: [boolean][optional]              // выводить аккаунты со статусом "удалён" (по умолчанию выводит всё)
fired: [boolean][optional]                // выводить аккаунты со статусом "уволен" (по умолчанию выводит всё)
sortColumn: [string][optional],           // название столбца по которому происходит сортировка 
sortOrder: [string][optional],            // название порядка сортировки
limit: [number][optional][default=100]
offset: [number][optional][default=0]

Возвращаемое значение:
{
  pager: {
    totalRows: [number]                     // всего записей
  },
  rows: [
    {
      id: [number],                         // ид
	  	id1C: [string][optional],				// 1С ид
      firstName: [string],                  // имя
      lastName: [string],                   // фамилия
      middleName: [string],                 // отчество
      departmentId: [number],               // данные по отделу
	  	departmentId1C: [string][optional],	// 
      organizationId: [number],             // ид организации
	  	organizationId1C: [string],
      position: [string],                   // должность
      cardNumber: [number],
      avatar: [string],                     // аватар
      deleted: [boolean],                   // аккаунт удалён
      fired: [boolean],                     // рабоник уволен
      blocked: [number],                    // пользователь заблокирован
      dayScheduleTypeId: [number]           // тип расписания: 1 - наследуется от отдела, 2 - собственное
    },
    ...
  ]
}

Примечание:
Сортироваться могут несколько столбцов, в таком случае параметры передаются следующим образом:
sortColumn=XXX&sortOrder=ASC&sortColumn=YYY&sortOrder=DESC

Возможные значения sortColumn - accountLastName, departmentName, organizationName, cardNumber
Возможные значения sortOrder - ASC, DESC


--------------------------------------------------------------------------------
Получить информацию по аккаунту
GET /personnel/api/account

Параметры:
id: [number]

Возвращаемое значение:
{
  id: [number],                         // ид
  id1C: [string][optional],
  firstName: [string],                  // имя
  lastName: [string],                   // фамилия
  middleName: [string],                 // отчество
  departmentId: [number],               // данные по отделу
  departmentId1C: [string][optional],
  organizationId: [number],             // ид организации
  organizationId1C: [string][optional],
  position: [string],                   // должность
  cardNumber: [number],
  avatar: [string],                     // аватар
  deleted: [boolean],                   // аккаунт удалён
  fired: [boolean],                     // рабоник уволен
  blocked: [number],                    // пользователь заблокирован
  dayScheduleTypeId: [number]           // тип расписания: 1 - наследуется от отдела, 2 - собственное
}


--------------------------------------------------------------------------------
Добавить/редактировать персонал
POST /personnel/api/account

Параметры:
{
  id: [number][optional],             // ид редактируемого пользователя
  id1C: [string][optional],
  firstName: [string],                // имя
  lastName: [string],                 // фамилия
  middleName: [string],               // отчество
  departmentId: [number],             // ид отдела
  departmentId1C: [string],
  organizationId: [number],           // ид организации
  organizationId1C: [string],
  position: [string],                 // должность
  deleted: [boolean],                 // аккаунт удалён
  fired: [boolean],                   // рабоник уволен
  blocked: [number],                  // пользователь заблокирован
  dayScheduleTypeId: [number]            // тип расписания: 1 - наследуется от отдела, 2 - собственное
}

Возвращаемое значение:
В случае успеха:
{
  status: 'success',
  response: {
    id: [number]                      // ид созданного персонала
  }
}

В случае ошибки:
{
  status: 'error'
}


--------------------------------------------------------------------------------
Установить аватар для персонала
POST /personnel/api/account/avatar

Параметры:
{
  id: [number],
  avatar: [string],                    // аватар пользователя в BASE64
}

Возвращаемое значение:
В случае успеха:
{
  status: 'success',
}

В случае ошибки:
{
  status: 'error'
}


--------------------------------------------------------------------------------
Удалить аватар
DELETE /personnel/api/account/avatar

Параметры:
{
  id: [number]
}

Возвращаемое значение:
В случае успеха:
{
  status: 'success',
}

В случае ошибки:
{
  status: 'error'
}


--------------------------------------------------------------------------------
Удалить персонал
DELETE /personnel/api/account

Параметры:
{
  id: [number]
}

Возвращаемое значение:
В случае успеха:
{
  status: 'success'
}

В случае ошибки:
{
  status: 'error'
}


--------------------------------------------------------------------------------
Получить список карт в системе:
GET /personnel/api/cards

Параметры:
type=[number][optional][default=0]				// тип карты: 1 - мастер-карта, 2 - обычная, 3 - обычная-блок, 4 - временная, 0 - все
limit=[number][optional][default=10]			//
offset=[number][optional][default=0]

Возвращаемое значение:
{
  pager: {
    totalRows: [number]                     // всего записей
  },
  rows: [
    {
    	number: [number],											// номер карты
    	validTo: [number],										// срок действия, до
    	validFrom: [number][optional],				// срок действия, начиная с
    	type: [number],												// тип карты: 1 - мастер-карта, 2 - обычная, 3 - обычная-блок, 4 - временная, 0 - не определено
    	blocked: [boolean]										// карта заблокирована
		},
    ...
  ]
}


--------------------------------------------------------------------------------
Получить информацию по карте:
GET /personnel/api/card

Параметры:
id=[number]

Возвращаемое значение:
{
  number: [number],													// номер карты
  validTo: [number],												// время действия карты
	validFrom: [number][optional],						// срок действия, начиная с
	type: [number],														// тип карты: 1 - мастер-карта, 2 - обычная, 3 - обычная-блок, 4 - временная, 0 - не определено
	blocked: [boolean],												// карта заблокирована
	doc: { [optional]													// для временной карты - связанный документ
		id: [number],														// ид документа
		type: [string],													// тип документа
		number: [string],												// номер документа
		issueDate: [number],										// дата выдачи
		issuerName: [string],										// название выдавшей организации
		body: [string],													// доп. данные
		ownerName: [string]											// имя владельца
	}
}


--------------------------------------------------------------------------------
Привязать/отвязать карту
POST /personnel/api/card

Параметры:
{
  accountId: [number],                    	// ид пользователя
  number: [number],                       	// номер карты
  validTo: [number],												// время действия карты
	validFrom: [number][optional],						// срок действия, начиная с
	type: [number],														// тип карты: 1 - мастер-карта, 2 - обычная, 3 - обычная-блок, 4 - временная, 0 - не определено
	blocked: [boolean],												// карта заблокирована
	doc: { [optional]													// для временной карты - связанный документ
		type: [string],													// тип документа
		number: [string],												// номер документа
		issueDate: [number],										// дата выдачи
		issuerName: [string],										// название выдавшей организации
		body: [string],													// доп. данные
		ownerName: [string]											// имя владельца
	}
}

Возвращаемое значение:
В случае успеха:
{
  status: 'success'
}

В случае ошибки:
{
  status: 'error'
}


--------------------------------------------------------------------------------
Удалить карту:
DELETE /personnel/api/card

Параметры:
number=[number]

Возвращаемое значение:
В случае успеха:
{
  status: 'success'
}

В случае ошибки:
{
  status: 'error'
}


--------------------------------------------------------------------------------
Получить шаблоны пропуска:
GET /personnel/api/badge/templates

Возвращаемое значение:
[
  {
    id: [number],                         // ид шаблона
    name: [string],                       // название шаблона
    template: [string],                   // структура шаблона
    params: [                             // параметры шаблона
      {
        id: [string],                     // название/ид параметра
        type: [string],                   // тип параметра
        value: [string]                   // значение параметра (см. /personnel/api/badge)
      },
      ...
    ]
  },
  ...
]


--------------------------------------------------------------------------------
Создать/редактировать шаблон пропуска
POST /personnel/api/badge/template

Передаваемое значение:
{
  id: [number][optional],               // ид шаблона
  name: [string],                       // название шаблона
  template: [string],                   // структура шаблона
  params: [ [optional]                  // параметры шаблона
    {
      id: [string],                     // название/ид параметра
      type: [string],                   // тип параметра
      value: [string]                   // значение параметра (см. /personnel/api/badge)
    },
    ...
  ]
}

Возвращаемое значение:
В случае успеха:
{
  status: 'success',
  response: {[optional]               // (только при создании)
    id: [number]                      // ид созданного шаблона
  }
}

В случае ошибки:
{
  status: 'error'
}


--------------------------------------------------------------------------------
Удалить шаблон пропуска
DELETE /personnel/api/badge/template

Парамерты:
{
  id: [number]                          // ид шаблона
}

Возвращаемое значение:
В случае успеха:
{
  status: 'success'
}

В случае ошибки:
{
  status: 'error'
}


--------------------------------------------------------------------------------
Получить данные для заполнения карты
GET /personnel/api/badge

Параметры
accountId: [number]                       // ид аккаунта

Возвращаемое значение:
{
  account: {
    id: [number],                         // ид
    firstName: [string],                  // имя
    lastName: [string],                   // фамилия
    middleName: [string],                 // отчество
    position: [string],                   // должность
    cardNumber: [number],                 // номер карты
    cardValidTo: [string],								// время действия карты
    cardIssueDate: [string],              // дата выдачи карты
    avatar: [string]                      // аватар
  },
  department: {
    id: [number],
    name: [string]
  },
  organization: {
    id: [number],
    name: [string],
    fullName: [string]
  }
}


--------------------------------------------------------------------------------
Получить данные для заполнения карт по отделам или организациям
GET /personnel/api/badges

Параметры
departmentId: [number][optional]           // ид отдела
organizationId: [number][optional]         // ид организации

Возвращаемое значение:
[
  {
    account: {
      id: [number],                         // ид
      firstName: [string],                  // имя
      lastName: [string],                   // фамилия
      middleName: [string],                 // отчество
      position: [string],                   // должность
      cardNumber: [number],                 // номер карты
      cardValidTo: [string],								// время действия карты
      cardIssueDate: [string],              // дата выдачи карты
      avatar: [string]                      // аватар
    },
    department: {
      id: [number],
      name: [string]
    },
    organization: {
      id: [number],
      name: [string],
      fullName: [string]
    }
  },
  ...
]


--------------------------------------------------------------------------------
Сформировать распечатку бейджиков
GET /personnel/api/badges/print

Параметры
templateId: [number]                      // ид шаблона
departmentId: [number][optional]          // ид отдела
organizationId: [number][optional]        // ид отдела
accountId: [number][optional]             // ид сотрудника
format: [string]                          // формат вывода

Возвращаемое значение:
Документ pdf


--------------------------------------------------------------------------------
Получить список отделов предприятия
GET /personnel/api/departments

Параметры:
limit: [number][optional][default=100]
offset: [number][optional][default=0]
organizationId: [number]                 	// ид организации
name: [string][optonal]                  	// название отдела 

Возвращаемое значение:
{
  pager: {
    totalRows: [number]                   	// всего записей
  },
  rows: [
    {
      id: [number],                       	// ид отдела
      name: [string],                     	// название отдела
      description: [string],              	// описание отдела
      organizationId: [number],           	// ид организации
	  id1C: [string][optional],
	  organizationId1C: [string][optional],
      dayScheduleTypeId: [number],        	// тип расписания: 1 - наследуется от организации, 2 - собственное
      blocked: [boolean]					// отдел заблокирован
    },
    ...
  ]
}

--------------------------------------------------------------------------------
Добавить/редактировать отдел
POST /personnel/api/department

Параметры:
{
  id: [number][optional],					// ид редактируемого отдела
  id1C: [string][optional],
  name: [string],							// название отдела
  description: [string],					// описание отдела
  organizationId: [number],					// ид организации
  organizationId1C: [string][optional],
  dayScheduleTypeId: [number],				// тип расписания: 1 - наследуется от организации, 2 - собственное
  blocked: [boolean]						// отдел заблокирован  
}

Возвращаемое значение:
В случае успеха:
{
  status: 'success',
  response: {
    id: [number]                          // ид созданного объекта
  }
}

В случае ошибки:
{
  status: 'error'
}


--------------------------------------------------------------------------------
Удалить отдел
DELETE /personnel/api/department

Параметры: 
{
  id: [number] // ид удаляемого элемента
}


Возвращаемое значение:
В случае успеха:
{
  status: 'success'
}

В случае ошибки:
{
  status: 'error'
}


--------------------------------------------------------------------------------
Получить список организаций
GET /personnel/api/organizations

Параметры:
limit: [number][optional][default=100]
offset: [number][optional][default=0]

Возвращаемое значение:
{
  pager: {
    totalRows: [number]                   // всего записей
  },
  rows: [
    {
      id: [number],                       // ид
	  id1C: [string][optional],
      name: [string],                     // название
      fullName: [string],                 // полное название
      description: [string],              // описание
      blocked: [boolean],									// организация заблокирована
      departments: [                      // список отделов
        {
          id: [number],
		  id1C: [string][optional],
          name: [string],
          description: [string],
          organizationId: [number],
		  organizationId1C: [string][optional],
          blocked: [boolean]
        },
        ...
      ]
    },
    ...
  ]
}


--------------------------------------------------------------------------------
Создать/редактировать организацию
POST /personnel/api/organization

Параметры:
{
  id: [number][optional],
  id1C: [string][optional],
  name: [string],
  fullName: [string],
  description: [string],
  blocked: [boolean]
}

Возвращаемое значение:
В случае успеха:
{
  status: 'success',
  response: {[optional]                 // только при создании нового отдела
    id: [number]
  }
}

В случае ошибки:
{
  status: 'error'
}


--------------------------------------------------------------------------------
Удалить организацию
DELETE /personnel/api/organization

Параметры:
{
  id: [number]
}

Возвращаемое значение:
В случае успеха
{
  status: 'success'
}

В случае ошибки:
{
  status: 'error'
}


--------------------------------------------------------------------------------
Получить список временных карт
GET /personnel/api/temp_cards

Параметры:
limit: [number][optional][default=100]
offset: [number][optional][default=0]

Возвращаемое значение:
{
  pager: {
    totalRows: [number]                   // всего записей
  },
  rows: [
    {
      id: [number],
      number: [number],
      fromDate: [number],
      toDate: [number],
      dayScheduleTypeId: [number],
      documentTypeId: [number],
      document: [string]    
    },
    ...
  ]
}


--------------------------------------------------------------------------------
Создать/редактировать временную карту
POST /personnel/api/temp_card

Параметры:
{
  id: [number][optional],
  number: [number],
  fromDate: [number],
  toDate: [number],
  dayScheduleTypeId: [number],
  documentTypeId: [number],
  document: [string]    
}

Возвращаемое значение:
В случае успеха:
{
  status: 'success',
  response: {[optional]                 // только при создании новой временной карты
    id: [number]
  }
}

В случае ошибки:
{
  status: 'error'
}


--------------------------------------------------------------------------------
Удалить временную карту
DELETE /personnel/api/temp_card

Параметры:
{
  id: [number]
}

Возвращаемое значение:
В случае успеха
{
  status: 'success'
}

В случае ошибки:
{
  status: 'error'
}


>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
>> Модуль REPORTS                                                             >>
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
--------------------------------------------------------------------------------
Получить отчёт по событиям
GET /reports/api/report

Параметры:
limit=[number][optional][default=100]         // максимальное количество строк в выборке
offset=[number][optional][default=0]          // смещение относительно первого элемента
id=1                                          // ид отчёта
startDate=[number][optional]                  // дата начала выборки (по умолчанию - самая первая запись в бд)
endDate=[number][optional][default=curtime]   // дата окончания выборки (по умолчанию - текущая дата)
eventTypes=[...number][optional]              // фильтр событий, например: '11,12,13', по умолчанию - все события
accountId=[number][optional]                  // ид аккаунта
departmentId=[number][optional]               // ид отдела
organizationId=[number][optional]             // ид организации
zoneId=[number][optional]											// ид организации
format=[string][optional]                     // формат вывода ('text', 'csv', 'pdf', 'xls', 'html', 'json', etc.)
sortColumn: [string][optional]								// название столбца по которому происходит сортировка 
sortOrder: [string][optional]									// название порядка сортировки

Возвращаемое значение:
{
  pager: {
    totalRows: [number]                       // всего записей
  },
  rows: [
    {
      date: [number],						  						// время события (в виде таймстемпа)
      deviceName: [string],					  				// название устройства
      organizationName: [string],		      		// название организации
      departmentName: [string],				  			// название отдела
      employeeFullName: [string],					  	// фамилия
      cardNumber: [number],					  				// номер карты
      path: [string],						  						// направление прохода (расширение для зон)
      direction: [string],					  				// направление прохода
      operation: [string]					  					// название операции
    },
    ...
  ]
}

Примечание:
Сортироваться могут несколько столбцов, в таком случае параметры передаются следующим образом:
sortColumn=XXX&sortOrder=ASC&sortColumn=YYY&sortOrder=DESC


--------------------------------------------------------------------------------
Получить отчёт по нахождению работников в зонах
GET /reports/api/report

Параметры:
limit=[number][optional][default=100]         // максимальное количество строк в выборке
offset=[number][optional][default=0]          // смещение относительно первого элемента
id=2                                          // ид отчёта
startDate=[number][optional]                  // дата начала выборки (по умолчанию - самая первая запись в бд)
endDate=[number][optional][default=curtime]   // дата окончания выборки (по умолчанию - текущая дата)
zoneId=[number][optional]                     // ид зоны
accountId=[number][optional]                  // ид аккаунта
departmentId=[number][optional]               // ид отдела
organizationId=[number][optional]             // ид организации
format=[string][optional]                     // формат вывода ('text', 'csv', 'pdf', 'xls', 'html', 'json', etc.)
sortColumn: [string][optional],               // название столбца по которому происходит сортировка 
sortOrder: [string][optional],                // название порядка сортировки

Возвращаемое значение:
{
  pager: {
    totalRows: [number]                       // всего записей
  },
  rows: [
    {
      enterDate: [number],                    // дата входа в зону (значение - таймстэмп)
      exitDate: [number],                     // дата выхода из зоны (значение - таймстэмп)
      employeeFullName: [string],							// имя
      cardNumber: [number],										// номер карты
      zoneName: [string]                      // название зоны
    },
    ...
  ]
}

Примечание:
Сортироваться могут несколько столбцов, в таком случае параметры передаются следующим образом:
sortColumn=XXX&sortOrder=ASC&sortColumn=YYY&sortOrder=DESC


--------------------------------------------------------------------------------
Данные по фактически отработанному времени за период
GET /reports/api/report

Параметры:
limit=[number][optional][default=100]         // максимальное количество строк в выборке
offset=[number][optional][default=0]          // смещение относительно первого элемента
id=3                                          // ид отчёта
year=[number]                                 // год
month=[number]                                // месяц
accountId=[number][optional]                  // ид аккаунта
departmentId=[number][optional]               // ид отдела
organizationId=[number][optional]             // ид организации
format=[string][optional]                     // формат вывода ('text', 'csv', 'pdf', 'xls', 'html', 'json', etc.)
sortColumn: [string][optional],               // название столбца по которому происходит сортировка 
sortOrder: [string][optional],                // название порядка сортировки

Возвращаемое значение:
{
  pager: {
    totalRows: [number]                       // всего записей
  },
  rows: [
    {
      accountName: [string],                  // имя
      totalTime: [string],                    // полное время (в минутах)
      averageTime: [string],                  // среднее время (в минутах)
      workTime: [number],                     // рабочее время (в минутах)
      days: [string,]                  				// информация по дням (от 28 до 31 в зависимости от месяца)
    }
  ]
}

Примечание:
Сортироваться могут несколько столбцов, в таком случае параметры передаются следующим образом:
sortColumn=XXX&sortOrder=ASC&sortColumn=YYY&sortOrder=DESC


--------------------------------------------------------------------------------
Получить отчёт о входах/выходах работников
GET /reports/api/report

Параметры:
limit=[number][optional][default=100]         // максимальное количество строк в выборке
offset=[number][optional][default=0]          // смещение относительно первого элемента
id=4                                          // ид отчёта
startDate=[number][optional]                  // дата начала выборки (по умолчанию - самая первая запись в бд)
endDate=[number][optional][default=curtime]   // дата окончания выборки (по умолчанию - текущая дата)
accountId=[number][optional]                  // ид аккаунта
departmentId=[number][optional]               // ид отдела
organizationId=[number][optional]             // ид организации
format=[string][optional]                     // формат вывода ('text', 'csv', 'pdf', 'xls', 'html', 'json', etc.)
sortColumn: [string][optional],               // название столбца по которому происходит сортировка 
sortOrder: [string][optional],                // название порядка сортировки

Возвращаемое значение:
{
  pager: {
    totalRows: [number]                       // всего записей
  },
  rows: [
    {
      accountName: [string],                  // имя аккаунта
      days: [
        {
          enterDate: [number],
          exitDate: [number],
          elapsedTime: [string]
        },
        ...
      ]
    }
  ]
}

Примечание:
Сортироваться могут несколько столбцов, в таком случае параметры передаются следующим образом:
sortColumn=XXX&sortOrder=ASC&sortColumn=YYY&sortOrder=DESC


--------------------------------------------------------------------------------
Получить отчёт о перемещениях работников
GET /reports/api/report

Параметры:
limit=[number][optional][default=100]         // максимальное количество строк в выборке
offset=[number][optional][default=0]          // смещение относительно первого элемента
id=5                                          // ид отчёта
startDate=[number][optional]                  // дата начала выборки (по умолчанию - самая первая запись в бд)
endDate=[number][optional][default=curtime]   // дата окончания выборки (по умолчанию - текущая дата)
accountId=[number][optional]                  // ид аккаунта
departmentId=[number][optional]               // ид отдела
organizationId=[number][optional]             // ид организации
zoneId=[number][optional]                     // ид зоны
format=[string][optional]                     // формат вывода ('text', 'csv', 'pdf', 'xls', 'html', 'json', etc.)
sortColumn: [string][optional],               // название столбца по которому происходит сортировка 
sortOrder: [string][optional],                // название порядка сортировки

Возвращаемое значение:
{
  pager: {
    totalRows: [number]                       // всего записей
  },
  rows: [
    {
      accountName: [string],
      zoneName: [string],
      enterDate: [number],
      exitDate: [number]
    },
    ...
  ]
}

Примечание:
Сортироваться могут несколько столбцов, в таком случае параметры передаются следующим образом:
sortColumn=XXX&sortOrder=ASC&sortColumn=YYY&sortOrder=DESC


--------------------------------------------------------------------------------
Получить отчет о дисциплине приходов и уходов сотрудников за месяц
GET /reports/api/report

Параметры:
limit=[number][optional][default=100]         // максимальное количество строк в выборке
offset=[number][optional][default=0]          // смещение относительно первого элемента
id=6                                          // ид отчёта
year=[number]                                 // год
month=[number]                                // месяц
accountId=[number][optional]                  // ид аккаунта
departmentId=[number][optional]               // ид отдела
organizationId=[number][optional]             // ид организации
format=[string][optional]                     // формат вывода ('text', 'csv', 'pdf', 'xls', 'html', 'json', etc.)
sortColumn: [string][optional],               // название столбца по которому происходит сортировка 
sortOrder: [string][optional],                // название порядка сортировки

Возвращаемое значение:
{
  pager: {
    totalRows: [number]                       // всего записей
  },
  rows: [
    {
      accountName: [string],                  // имя аккаунта
      lateness: [...number],                  // массив дней со списком дней, когда было опоздание (таймстемпы)
      earlyDeparture: [...number],            // массив дней с ранними уходами (таймстэмп)
      absence: [...number]                    // массив дней с отсутствиями (таймстэмп)
    }
  ]
}

Примечание:
Сортироваться могут несколько столбцов, в таком случае параметры передаются следующим образом:
sortColumn=XXX&sortOrder=ASC&sortColumn=YYY&sortOrder=DESC


--------------------------------------------------------------------------------
Получить отчет о дисциплине приходов и уходов сотрудников за месяц
GET /reports/api/report

Параметры:
limit=[number][optional][default=100]         // максимальное количество строк в выборке
offset=[number][optional][default=0]          // смещение относительно первого элемента
id=7                                          // ид отчёта
year=[number]                                 // год
month=[number]                                // месяц
accountId=[number][optional]                  // ид аккаунта
departmentId=[number][optional]               // ид отдела
organizationId=[number][optional]             // ид организации
format=[string][optional]                     // формат вывода ('text', 'csv', 'pdf', 'xls', 'html', 'json', etc.)
sortColumn: [string][optional],               // название столбца по которому происходит сортировка 
sortOrder: [string][optional],                // название порядка сортировки

Возвращаемое значение:
{
  pager: {
    totalRows: [number]                       // всего записей
  },
  rows: [
    {
      accountName: [string],                  // имя аккаунта
      days: [...number]                       // Состояние в данный день - 0 - отсутвие, 1 - полный день, 2 - поздний приход, 3 - ранний уход, 4 - поздний приход и ранний уход
    }
  ]
}

Примечание:
Сортироваться могут несколько столбцов, в таком случае параметры передаются следующим образом:
sortColumn=XXX&sortOrder=ASC&sortColumn=YYY&sortOrder=DESC



>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
>> Модуль CALENDAR                                                            >>
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
--------------------------------------------------------------------------------
Получить базовый календарь
GET /calendar/api/base

Параметры:
year: [number][optional][default=текущий год]     // год для которого запрашивается календарь

Возвращаемое значение:
{
  year: [number],                                 // год календаря
  days: {                                         // дни
    [number]: {                                   // дата [fixme - может быть, внести внутрь объекта?]
      type: [number],                             // тип дня (1 - выходной день, 2 - короткий день (предпраздничный), 3 - рабочий день (для субботы/воскресения))                     
      name: [string]                              // описание дня (например, название праздника)
    },
    ...
  }
}


--------------------------------------------------------------------------------
Сохранить базовый календарь (старый перезаписывается)
POST /calendar/api/base

Параметры:
{
  year: [number],                               // год календаря
  days: {                                       // дни
    [number]: {                                 // дата
      type: [number],                           // тип дня (1 - выходной день, 2 - короткий день (предпраздничный), 3 - рабочий день (для субботы/воскресения))                     
      name: [string]                            // описание дня (например, название праздника)
    },
    ...
  }
}

Возвращаемое значение:
В случае успеха:
{
  status: 'success'
}

В случае провала:
{
  status: 'error'
}


--------------------------------------------------------------------------------
Получить дневное расписание
GET /calendar/api/schedule/day

Параметры:
departmentId: [number][optional]       // для отдела
organizationId: [number][optional]     // для организации
accountId: [number][optional]          // для аккаунта

Возвращаемое значение:
{
  id: [number],                         // ид расписания
  startTime: [number],                  // начало рабочего дня (в минутах с начала дня)
  finishTime: [number],                 // окончание рабочего дня (в минутах с начала дня)
  lunchStartTime: [number],             // начало обеда (в минутах с начала дня)
  lunchFinishTime: [number],            // окончание обеда (в минутах с начала дня)
  halfHolidayFinishTime: [number],      // окончание в сокращённый рабочий день (в минутах с начала дня)
  earlyArrivalTime: [number],           // ранний приход (в минутах)
  latenessTime: [number],               // опоздание (в минутах)
  earlyDepartureTime: [number],         // ранний уход (в минутах)
  lateDepartureTime: [number],          // поздний уход (в минутах)
  absenceTime: [number]                 // время отсутствия (в минутах)
}


--------------------------------------------------------------------------------
Установить дневное расписание
POST /calendar/api/schedule/day

Параметры:
{
  departmentId: [number][optional],       // ид отдела
  organizationId: [number][optional],     // ид организации
  accountId: [number][optional],          // ид аккаунта
  schedule: {
    id: [number][optional],               // ид расписания (при создании не указывается)
    startTime: [number],                  // начало рабочего дня (в минутах с начала дня)
    finishTime: [number],                 // окончание рабочего дня (в минутах с начала дня)
    lunchStartTime: [number],             // начало обеда (в минутах с начала дня)
    lunchFinishTime: [number],            // окончание обеда (в минутах с начала дня)
    halfHolidayFinishTime: [number],      // окончание в сокращённый рабочий день (в минутах с начала дня)
    earlyArrivalTime: [number],           // ранний приход (в минутах)
    latenessTime: [number],               // опоздание (в минутах)
    earlyDepartureTime: [number],         // ранний уход (в минутах)
    lateDepartureTime: [number],          // поздний уход (в минутах)
    absenceTime: [number]                 // время отсутствия (в минутах)
  }
}

Возвращаемое значение:
В случае успеха:
{
  status: 'success',
  response: { [optional]                  // возвращается только при создании нового расписания
    id: [number]
  }
}

В случае ошибки:
{
  status: 'error'
}


--------------------------------------------------------------------------------
Удалить дневное расписание
DELETE /calendar/api/schedule/day

Параметры: 
{
  id: [number][optional],
  organizationId: [number][optional],
  departmentId: [number][optional],
  accountId: [number][optional]  
}

Возвращаемое значение:
В случае успеха:
{
  status: 'success'
}

В случае ошибки:
{
  status: 'error'
}


--------------------------------------------------------------------------------
Получить недельное расписание
GET /calendar/api/schedule/week

Параметры:
zoneId: [number]                        // ид зоны

Возвращаемое значение:
[
  {
    id: [number],                       // ид расписания
    startTime: [number],                // с (в минутах)
    endTime: [number],                  // по (в минутах)
    days: [                             // список по дням
      [number], [number], [number], [number], [number], [number], [number]
    ]
  },
  ...
]


--------------------------------------------------------------------------------
Установить недельное расписание
POST /calendar/api/schedule/week

Параметры:
{
  zoneId: [number],                         // ид группы доступа
  schedule: [
    {
      id: [number][optional],               // ид расписания (при создании не указывается)
      startTime: [number],                  // с (в минутах)
      endTime: [number],                    // по (в минутах)
      days: [                               // список по дням
        [number], [number], [number], [number], [number], [number], [number]
      ]
    },
    ...
  ]
}

Возвращаемое значение:
{
  status: 'success',
  response: [ [optional]                    // в случае создания расписания
    id: [number],
    ...
  ]
}


--------------------------------------------------------------------------------
Удалить недельное расписание
DELETE /calendar/api/schedule/week

Параметры:
{
  id: [number],                           // ид расписания
  zoneId: [number]                        // ид группы доступа
}

Возвращаемое значение:
В случае успеха:
{
  status: 'success'
}

В случае ошибки:
{
  status: 'error'
}



>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
>> Модуль ZONES                                                               >>
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
--------------------------------------------------------------------------------
Создать/сохранить новую зону доступа
POST /zones/api/zone

Параметры:
{
  id: [number][optional],             	// ид зоны
  name: [string],                     	// название
  description: [string],              	// описание
  singlePass: [boolean][optional],			// в эту зону возможен только однократный проход
  singlePassTimeout: [number][optional]	// таймаут однократного прохода
}

Возвращаемое значение:
В случае успеха:
{
  status: 'success',
  response: {[optional]               	// в случае создания зоны
    id: [number]                      	// ид созданного объекта
  }
}

В случае ошибки:
{
  status: 'error'
}


--------------------------------------------------------------------------------
Получить зоны
GET /zones/api/zones

Параметры:
organizationId=[number][optional]       		// список зон, с которыми ассоциирована организация
departmentId=[number][optional]         		// список зон, с которыми связан отдел
cardNumber=[number][optional]					// список зон, с которыми связана карта 
limit=[number][default=100]
offset=[number][default=0]

Возвращаемое значение:
{
  pager: {
    totalRows: [number]                   	// всего записей
  },
  rows: [
    {
      	id: [number],                       	// ид
      	name: [string],                     	// название
      	description: [string],               	// описание
  		singlePass: [boolean][optional],		// в эту зону возможен только однократный проход
  		singlePassTimeout: [number][optional]	// таймаут однократного прохода
    },
    ...
  ]
}


--------------------------------------------------------------------------------
Удалить зону с заданным ид
DELETE /zones/api/zone

Параметры:
{
  id: [number]
}

Возвращаемое значение:
В случае успеха:
{
  status: 'success'
}

В случае ошибки:
{
  status: 'error'
}


--------------------------------------------------------------------------------
Получить выбранный календарь для организации, отдела, аккаунта или временной карты:
GET /zones/api/acl

Параметры:
organizationId=[number][optional]
departmentId=[number][optional]
accountId=[number][optional]
cardNumber=[number][optional]

Возвращаемое значение:
{
  aclTypeId: [number],                      // тип (0 - доступ везде, 1 - доступ по объектам)
  accessTypeId: [number][optional],         // тип доступа (0 - никогда, 1 - всегда)
  zones: [ [optional]                       // расписания для зон
    {
      zoneId: [number],                     // ид зоны доступа
      weekSchedules: [...number][optional], // выбранные расписания
      isWorkZone: [boolean],                // рабочая зона
      accessTypeId: [number]                // тип доступа (0 - никогда, 1 - всегда, 2 - по расписанию, 3 - по расписанию отдела или организации)
    },
    ...
  ]
}

Примечание:
Если aclTypeId = 0, то поле zones не задаётся - все настройки действуют глобально. В таком случае задаётся поле accessTypeId с правами доступа.
Если aclTypeId = 1 (доступ регулируется отдельно для каждой зоны) - то accessTypeId не задаётся, но задаётся массив зон с правами доступа


--------------------------------------------------------------------------------
Установить календари для организации, отдела или аккаунта или временной карты:
POST /zones/api/acl

Параметры:
{
  organizationId: [number][optional],     // расписание задаётся для организации 
  departmentId: [number][optional],       // расписание задаётся для отдела
  accountId: [number][optional],          // расписание задаётся для аккаунта
  cardNumber: [number][optional],					// расписание задаётся для временной карты
  aclTypeId: [number],                    // тип (0 - доступ везде, 1 - доступ по объектам)
  accessTypeId: [number][optional],       // тип доступа (0 - никогда, 1 - всегда)
  zones: [ [optional]                     // задаваемое расписание
    {
      zoneId: [number],                   // ид зоны
      isWorkZone: [boolean],              // рабочая зона (1 - да, 0 - нет)
      accessTypeId: [number],             // тип доступа (0 - никогда, 1 - всегда, 2 - по расписанию, 3 - по расписанию отдела или организации)
      weekSchedules: [...number][optional]// выбранные расписания
    },
    ...
  ]
}

Возвращаемое значение:
В случае успеха:
{
  status: 'success'
}

В случае ошибки:
{
  status: 'error'
}



>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
>> SCHEDULER                                                                  >>
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
--------------------------------------------------------------------------------
Получить данные о задаче
GET /scheduler/api/db

Возвращаемое значение:
{
  time: [number]            // Время старта задачи (в минутах)
}


--------------------------------------------------------------------------------
Установить задачу
POST /scheduler/api/db

Параметры:
{
  time: [number]            // Время старта задачи (в минутах) 
}

Возвращаемое значение:
В случае успеха:
{
  status: 'success'
}

В случае ошибки:
{
  status: 'error'
}



>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
>> INTEGRATION 1C                                                             >>
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
--------------------------------------------------------------------------------
Получить данные из 1С
GET /integration/api/1C

Возвращаемое значение:
{
	organizations: [...],
	departments: [...],
	accounts: [...]
}

Проверить включен ли модуль интеграции с 1С

GET /integration/api/check

Возвращаемое значение:
{
    enabled: true ? false
}


>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
>> INTEGRATION 1C-Битрикс                                                             >>
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
--------------------------------------------------------------------------------
Получить данные из 1С
GET /integration/bitrix/sync

Возвращаемое значение:
{
	departments: [...],
	accounts: [...]
}

Проверить включен ли модуль интеграции с 1С

GET /integration/bitrix/check

Возвращаемое значение:
{
    enabled: true ? false
}


>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
>> WebSocket API                                                              >>
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
--------------------------------------------------------------------------------
Общий формат ответа клиенту:
{
  '$id': [number][optional],        // ид пакета (запрос-ответ имеют один и тот же ид)
  event: {                          // тип события
    id: [number][optional],         // ид события в цепочке (если поддерживается)
    datetime: [number][optional],   // время события
    type: {
      id: [number][optional],       // ид
      name: [string],               // название
    },
    moduleId: [number][optional],   // ид модуля
    deviceId: [number][optional]    // ид устройства
  },
  data: [object]                    // данные 
}



СОБЫТИЯ КЛИЕНТУ
--------------------------------------------------------------------------------
Очередь событий
{
  '$id': [number][optional],          // ид пакета (запрос-ответ имеют один и тот же ид)
  event: {
    type: {
      name: 'EventsQueue'             // название для очереди событий
    }
  }
  data: [ ... ]                       // список событий (например, см ниже)
}


--------------------------------------------------------------------------------
Проход пользователя
{
  '$id': [number][optional],          // ид пакета (запрос-ответ имеют один и тот же ид)
  event: {                            // информация о событии 
    id: [number],                     // ид события
    datetime: [number],               // время события
    type: {     
      id: [number],                   // числовой тип события
      name: 'InOutEvent'              // название события
    },
    moduleId: [number],               // ид модуля
    deviceId: [number]                // ид устройства
  },
  data: {
    account: {                        // данные об аккаунте
      id: [number],                   // ид аккаунта
      firstName: [string],            // имя
      lastName: [string],             // фамилия
      middleName: [string],           // отчество
      avatar: [string],               // аватар
      cardNumber: [number],           // номер карты
      departmentId: [number],         // отдел
      organizationId: [number]        // ид организации
    },
    direction: [number]               // null - не определено, 1 - вход, 2 - выход
  }
}


--------------------------------------------------------------------------------
Несостоявшийся проход
{
  '$id': [number][optional],          // ид пакета (запрос-ответ имеют один и тот же ид)
  event: {                            // информация о событии 
    id: [number],                     // ид события
    datetime: [number],               // время события
    type: {     
      id: [number],                   // числовой тип события
      name: 'InOutTimeoutEvent'       // название события
    },
    moduleId: [number],               // ид модуля
    deviceId: [number]                // ид устройства
  },
  data: {
    direction: [number]               // направление неудавшегося прохода
  }
}


--------------------------------------------------------------------------------
Ошибка устройства
{
  '$id': [number][optional],          // ид пакета (запрос-ответ имеют один и тот же ид)
  event: {                            // информация о событии 
    id: [number],                     // ид события
    datetime: [number],               // время события
    type: {     
      id: [number],                   // числовой тип события
      name: 'DeviceErrorEvent'        // название события
    },
    moduleId: [number],               // ид модуля
    deviceId: [number]                // ид устройства
  },
  data: {
    description: [string]             // описание ошибки  
  }
}


--------------------------------------------------------------------------------
Измнение состояния устройства
{
  event: {                            // информация о событии 
    id: [number],                     // ид события
    datetime: [number],               // время события
    type: {     
      id: [number],                   // числовой тип события
      name: 'DeviceStateChangeEvent'  // название события
    },
    moduleId: [number],               // ид модуля
    deviceId: [number]                // ид устройства
  },
  data: {
    directionOpenMask: [[number], [number]][optional] // состояние устройства (для турникетов) (0 - закрыто, 1 - открыто)
    state: [number][optional]         // состояние устройства (для дверей)
  }
}



ЗАПРОСЫ СЕРВЕРУ
--------------------------------------------------------------------------------
Получить N последних проходов
{
  '$id': [number],                        // ид пакета (запрос-ответ имеют один и тот же ид)
  message: 'GetLastInOutsFunc',           // название события
  params: {
    limit: [number][optional][default=10] // выводить только N последних событий
  }
}

Ответ:
{
  '$id': [number],                        // ид пакета (запрос-ответ имеют один и тот же ид)
  event: {
    type: {
      name: 'EventsQueue'                 // название для очереди событий
    }
  },
  data: [ ... ]                           // список событий проходов
}


--------------------------------------------------------------------------------
Считать карту
{
  '$id': [number],                    // ид пакета (запрос-ответ имеют один и тот же ид)
  message: 'ReadCard'
}

Ответ:
{
  '$id': [number],
  event: {
    datetime: [number],
    type: {
      id: 3,
      name: 'CardReaded'
    }
  },
  data: {
  	number: [number],				          // номер карты
    internalId: [number],             // внутренний номер карты
    readerId: [number]                // серийный номер считывателя
  }
}


/******************************************************************************/
Список разрешений системы:
1 - Вход в систему
2 - Доступ к модулю
3 - Управление модулем
1024 - Просмотр устройств
1025 - Настройка устройства
1026 - Управление устройством
2048 - Просмотр организаций
2049 - Редактирование организаций
3072 - Просмотр отделов
3073 - Редактирование отделов
4096 - Просмотр персонала
4097 - Редактирование персонала
5120 - Просмотр зон
5121 - Редактирование зон
6144 - Просмотр пользователей
6145 - Редактирование пользователей
4294967295 - Все привилегии - полный доступ

==============================================================================Дописать
1.  /core/api/protocols
2.  /core/api/connections

